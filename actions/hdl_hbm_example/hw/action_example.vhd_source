--
-- Copyright 2019 International Business Machines
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.STD_LOGIC_UNSIGNED.all;
use ieee.numeric_std.all;


entity action_example is
    generic (

        -- Parameters of Axi Slave Bus Interface AXI_CTRL_REG
        C_AXI_CTRL_REG_DATA_WIDTH    : integer   := 32;
        C_AXI_CTRL_REG_ADDR_WIDTH    : integer   := 32;

        -- Parameters of Axi Master Bus Interface AXI_HOST_MEM ; to Host memory
        C_AXI_HOST_MEM_ID_WIDTH      : integer   := 2;
        C_AXI_HOST_MEM_ADDR_WIDTH    : integer   := 64;
        C_AXI_HOST_MEM_DATA_WIDTH    : integer   := 512;
        C_AXI_HOST_MEM_AWUSER_WIDTH  : integer   := 1;
        C_AXI_HOST_MEM_ARUSER_WIDTH  : integer   := 1;
        C_AXI_HOST_MEM_WUSER_WIDTH   : integer   := 1;
        C_AXI_HOST_MEM_RUSER_WIDTH   : integer   := 1;
        C_AXI_HOST_MEM_BUSER_WIDTH   : integer   := 1;
        
        -- Parameters for HBM interfaces
        --HBM_PARAMETERS_INSERTION_POINT

        INT_BITS                     : integer   := 64;
        CONTEXT_BITS                 : integer   := 8
    );
    port (
        action_clk              : in STD_LOGIC;
        action_rst_n            : in STD_LOGIC;
        int_req_ack             : in STD_LOGIC;
        int_req                 : out std_logic;
        int_src                 : out std_logic_vector(INT_BITS-1 DOWNTO 0);
        int_ctx                 : out std_logic_vector(CONTEXT_BITS-1 DOWNTO 0);

        --
        -- HBM interfaces
        --HBM_ENTITY_PORTS_INSERTION_POINT
        
        --
        -- Ports for NVMe control Interface                                                        -- only for DDRI_USED=TRUE
        axi_nvme_awaddr         : out std_logic_vector(31 downto 0);                               -- only for NVME_USED=TRUE
        axi_nvme_awlen          : out std_logic_vector(7 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_awsize         : out std_logic_vector(2 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_awburst        : out std_logic_vector(1 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_awlock         : out std_logic_vector(1 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_awcache        : out std_logic_vector(3 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_awprot         : out std_logic_vector(2 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_awregion       : out std_logic_vector(3 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_awqos          : out std_logic_vector(3 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_awvalid        : out std_logic;                                                   -- only for NVME_USED=TRUE
        axi_nvme_awready        : in std_logic;                                                    -- only for NVME_USED=TRUE
        axi_nvme_wdata          : out std_logic_vector(31 downto 0);                               -- only for NVME_USED=TRUE
        axi_nvme_wstrb          : out std_logic_vector(3 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_wlast          : out std_logic;                                                   -- only for NVME_USED=TRUE
        axi_nvme_wvalid         : out std_logic;                                                   -- only for NVME_USED=TRUE
        axi_nvme_wready         : in std_logic;                                                    -- only for NVME_USED=TRUE
        axi_nvme_bresp          : in std_logic_vector(1 downto 0);                                 -- only for NVME_USED=TRUE
        axi_nvme_bvalid         : in std_logic;                                                    -- only for NVME_USED=TRUE
        axi_nvme_bready         : out std_logic;                                                   -- only for NVME_USED=TRUE
        axi_nvme_araddr         : out std_logic_vector(31 downto 0);                               -- only for NVME_USED=TRUE
        axi_nvme_arlen          : out std_logic_vector(7 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_arsize         : out std_logic_vector(2 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_arburst        : out std_logic_vector(1 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_arlock         : out std_logic_vector(1 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_arcache        : out std_logic_vector(3 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_arprot         : out std_logic_vector(2 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_arregion       : out std_logic_vector(3 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_arqos          : out std_logic_vector(3 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_arvalid        : out std_logic;                                                   -- only for NVME_USED=TRUE
        axi_nvme_arready        : in std_logic;                                                    -- only for NVME_USED=TRUE
        axi_nvme_rdata          : in std_logic_vector(31 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_rresp          : in std_logic_vector(1 downto 0);                                 -- only for NVME_USED=TRUE
        axi_nvme_rlast          : in std_logic;                                                    -- only for NVME_USED=TRUE
        axi_nvme_rvalid         : in std_logic;                                                    -- only for NVME_USED=TRUE
        axi_nvme_rready         : out std_logic;                                                   -- only for NVME_USED=TRUE
        axi_nvme_arid           : out std_logic_vector(0 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_aruser         : out std_logic_vector(0 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_awid           : out std_logic_vector(0 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_awuser         : out std_logic_vector(0 downto 0);                                -- only for NVME_USED=TRUE
        axi_nvme_bid            : in std_logic_vector(0 downto 0);                                 -- only for NVME_USED=TRUE
        axi_nvme_buser          : in std_logic_vector(0 downto 0);                                 -- only for NVME_USED=TRUE
        axi_nvme_rid            : in std_logic_vector(0 downto 0);                                 -- only for NVME_USED=TRUE
        axi_nvme_ruser          : in std_logic_vector(0 downto 0);                                 -- only for NVME_USED=TRUE
        axi_nvme_wuser          : out std_logic_vector(0 downto 0);                                -- only for NVME_USED=TRUE

        -- Ports of Axi Slave Bus Interface AXI_CTRL_REG
        axi_ctrl_reg_awaddr     : in std_logic_vector(C_AXI_CTRL_REG_ADDR_WIDTH-1 downto 0);
     -- axi_ctrl_reg_awprot : in std_logic_vector(2 downto 0);
        axi_ctrl_reg_awvalid    : in std_logic;
        axi_ctrl_reg_awready    : out std_logic;
        axi_ctrl_reg_wdata      : in std_logic_vector(C_AXI_CTRL_REG_DATA_WIDTH-1 downto 0);
        axi_ctrl_reg_wstrb      : in std_logic_vector((C_AXI_CTRL_REG_DATA_WIDTH/8)-1 downto 0);
        axi_ctrl_reg_wvalid     : in std_logic;
        axi_ctrl_reg_wready     : out std_logic;
        axi_ctrl_reg_bresp      : out std_logic_vector(1 downto 0);
        axi_ctrl_reg_bvalid     : out std_logic;
        axi_ctrl_reg_bready     : in std_logic;
        axi_ctrl_reg_araddr     : in std_logic_vector(C_AXI_CTRL_REG_ADDR_WIDTH-1 downto 0);
        -- axi_ctrl_reg_arprot  : in std_logic_vector(2 downto 0);
        axi_ctrl_reg_arvalid    : in std_logic;
        axi_ctrl_reg_arready    : out std_logic;
        axi_ctrl_reg_rdata      : out std_logic_vector(C_AXI_CTRL_REG_DATA_WIDTH-1 downto 0);
        axi_ctrl_reg_rresp      : out std_logic_vector(1 downto 0);
        axi_ctrl_reg_rvalid     : out std_logic;
        axi_ctrl_reg_rready     : in std_logic;

        -- Ports of Axi Master Bus Interface AXI_HOST_MEM
                -- to HOST memory
        axi_host_mem_awaddr   : out std_logic_vector(C_AXI_HOST_MEM_ADDR_WIDTH-1 downto 0);
        axi_host_mem_awlen    : out std_logic_vector(7 downto 0);
        axi_host_mem_awsize   : out std_logic_vector(2 downto 0);
        axi_host_mem_awburst  : out std_logic_vector(1 downto 0);
        axi_host_mem_awlock   : out std_logic_vector(1 downto 0);
        axi_host_mem_awcache  : out std_logic_vector(3 downto 0);
        axi_host_mem_awprot   : out std_logic_vector(2 downto 0);
        axi_host_mem_awregion : out std_logic_vector(3 downto 0);
        axi_host_mem_awqos    : out std_logic_vector(3 downto 0);
        axi_host_mem_awvalid  : out std_logic;
        axi_host_mem_awready  : in std_logic;
        axi_host_mem_wdata    : out std_logic_vector(C_AXI_HOST_MEM_DATA_WIDTH-1 downto 0);
        axi_host_mem_wstrb    : out std_logic_vector(C_AXI_HOST_MEM_DATA_WIDTH/8-1 downto 0);
        axi_host_mem_wlast    : out std_logic;
        axi_host_mem_wvalid   : out std_logic;
        axi_host_mem_wready   : in std_logic;
        axi_host_mem_bresp    : in std_logic_vector(1 downto 0);
        axi_host_mem_bvalid   : in std_logic;
        axi_host_mem_bready   : out std_logic;
        axi_host_mem_araddr   : out std_logic_vector(C_AXI_HOST_MEM_ADDR_WIDTH-1 downto 0);
        axi_host_mem_arlen    : out std_logic_vector(7 downto 0);
        axi_host_mem_arsize   : out std_logic_vector(2 downto 0);
        axi_host_mem_arburst  : out std_logic_vector(1 downto 0);
        axi_host_mem_arlock   : out std_logic_vector(1 downto 0);
        axi_host_mem_arcache  : out std_logic_vector(3 downto 0);
        axi_host_mem_arprot   : out std_logic_vector(2 downto 0);
        axi_host_mem_arregion : out std_logic_vector(3 downto 0);
        axi_host_mem_arqos    : out std_logic_vector(3 downto 0);
        axi_host_mem_arvalid  : out std_logic;
        axi_host_mem_arready  : in std_logic;
        axi_host_mem_rdata    : in std_logic_vector(C_AXI_HOST_MEM_DATA_WIDTH-1 downto 0);
        axi_host_mem_rresp    : in std_logic_vector(1 downto 0);
        axi_host_mem_rlast    : in std_logic;
        axi_host_mem_rvalid   : in std_logic;
        axi_host_mem_rready   : out std_logic;
--      axi_host_mem_error    : out std_logic;
        axi_host_mem_arid     : out std_logic_vector(C_AXI_HOST_MEM_ID_WIDTH-1 downto 0);
        axi_host_mem_aruser   : out std_logic_vector(C_AXI_HOST_MEM_ARUSER_WIDTH-1 downto 0);
        axi_host_mem_awid     : out std_logic_vector(C_AXI_HOST_MEM_ID_WIDTH-1 downto 0);
        axi_host_mem_awuser   : out std_logic_vector(C_AXI_HOST_MEM_AWUSER_WIDTH-1 downto 0);
        axi_host_mem_bid      : in std_logic_vector(C_AXI_HOST_MEM_ID_WIDTH-1 downto 0);
        axi_host_mem_buser    : in std_logic_vector(C_AXI_HOST_MEM_BUSER_WIDTH-1 downto 0);
        axi_host_mem_rid      : in std_logic_vector(C_AXI_HOST_MEM_ID_WIDTH-1 downto 0);
        axi_host_mem_ruser    : in std_logic_vector(C_AXI_HOST_MEM_RUSER_WIDTH-1 downto 0);
        axi_host_mem_wuser    : out std_logic_vector(C_AXI_HOST_MEM_WUSER_WIDTH-1 downto 0)
);
end action_example;

architecture action_example of action_example is
component DMA1_HBM1_bd is
  port (
    ap_clk : in STD_LOGIC;
    ap_rst_n : in STD_LOGIC;
    s_axi_control_araddr : in STD_LOGIC_VECTOR ( 31 downto 0 );
    s_axi_control_arprot : in STD_LOGIC_VECTOR ( 2 downto 0 );
    s_axi_control_arready : out STD_LOGIC;
    s_axi_control_arvalid : in STD_LOGIC;
    s_axi_control_awaddr : in STD_LOGIC_VECTOR ( 31 downto 0 );
    s_axi_control_awprot : in STD_LOGIC_VECTOR ( 2 downto 0 );
    s_axi_control_awready : out STD_LOGIC;
    s_axi_control_awvalid : in STD_LOGIC;
    s_axi_control_bready : in STD_LOGIC;
    s_axi_control_bresp : out STD_LOGIC_VECTOR ( 1 downto 0 );
    s_axi_control_bvalid : out STD_LOGIC;
    s_axi_control_rdata : out STD_LOGIC_VECTOR ( 31 downto 0 );
    s_axi_control_rready : in STD_LOGIC;
    s_axi_control_rresp : out STD_LOGIC_VECTOR ( 1 downto 0 );
    s_axi_control_rvalid : out STD_LOGIC;
    s_axi_control_wdata : in STD_LOGIC_VECTOR ( 31 downto 0 );
    s_axi_control_wready : out STD_LOGIC;
    s_axi_control_wstrb : in STD_LOGIC_VECTOR ( 3 downto 0 );
    s_axi_control_wvalid : in STD_LOGIC;
    --HBMIPPORTS_INSERTION_POINT
    m_axi_host_mem_araddr : out STD_LOGIC_VECTOR ( 63 downto 0 );
    m_axi_host_mem_arlen : out STD_LOGIC_VECTOR ( 7 downto 0 );
    m_axi_host_mem_arsize : out STD_LOGIC_VECTOR ( 2 downto 0 );
    m_axi_host_mem_arburst : out STD_LOGIC_VECTOR ( 1 downto 0 );
    --m_axi_host_mem_arlock : out STD_LOGIC_VECTOR ( 0 to 0 );
    m_axi_host_mem_arcache : out STD_LOGIC_VECTOR ( 3 downto 0 );
    m_axi_host_mem_arprot : out STD_LOGIC_VECTOR ( 2 downto 0 );
    --m_axi_host_mem_arqos : out STD_LOGIC_VECTOR ( 3 downto 0 );
    m_axi_host_mem_arvalid : out STD_LOGIC;
    m_axi_host_mem_arready : in STD_LOGIC;
    m_axi_host_mem_rdata : in STD_LOGIC_VECTOR ( 1023 downto 0 );
    m_axi_host_mem_rresp : in STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axi_host_mem_rlast : in STD_LOGIC;
    m_axi_host_mem_rvalid : in STD_LOGIC;
    m_axi_host_mem_rready : out STD_LOGIC;
    m_axi_host_mem_awaddr : out STD_LOGIC_VECTOR ( 63 downto 0 );
    m_axi_host_mem_awburst : out STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axi_host_mem_awcache : out STD_LOGIC_VECTOR ( 3 downto 0 );
    m_axi_host_mem_awlen : out STD_LOGIC_VECTOR ( 7 downto 0 );
    --m_axi_host_mem_awlock : out STD_LOGIC_VECTOR ( 0 to 0 );
    m_axi_host_mem_awprot : out STD_LOGIC_VECTOR ( 2 downto 0 );
    --m_axi_host_mem_awqos : out STD_LOGIC_VECTOR ( 3 downto 0 );
    m_axi_host_mem_awready : in STD_LOGIC;
    m_axi_host_mem_awsize : out STD_LOGIC_VECTOR ( 2 downto 0 );
    m_axi_host_mem_awvalid : out STD_LOGIC;
    m_axi_host_mem_bready : out STD_LOGIC;
    m_axi_host_mem_bresp : in STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axi_host_mem_bvalid : in STD_LOGIC;
    m_axi_host_mem_wdata : out STD_LOGIC_VECTOR ( 1023 downto 0 );
    m_axi_host_mem_wlast : out STD_LOGIC;
    m_axi_host_mem_wready : in STD_LOGIC;
    m_axi_host_mem_wstrb : out STD_LOGIC_VECTOR ( 127 downto 0 );
    m_axi_host_mem_wvalid : out STD_LOGIC
  );
  end component DMA1_HBM1_bd;

 -- --
 -- -- ILA core
 -- --
 -- component ila_p16 is
 --   port (
 --     clk    : IN    STD_LOGIC;
 --     probe0 : IN    STD_LOGIC_VECTOR(15 downto 0)
 --   );  -- : 
 -- end component ila_p16;



begin

    int_req <= '0';
    int_src <= (others => '0');
    int_ctx <= (others => '0');

  ----
  ---- ILA core
  ----
  --mila_p16: ila_p16
  --  port MAP (
  --    clk => action_clk,
  --    probe0 => app_start & app_idle & app_ready & app_done & action_rst_n & dma_rd_req & axi_host_mem_arvalid_tmp & do_memcopy & reg_0x30(3 downto 0) & dma_wr_req & axi_host_mem_awvalid_tmp & axi_host_mem_arready & axi_host_mem_awready
  --  );  -- : 


blockdesign_i : component DMA1_HBM1_bd
     port map (
      ap_clk => action_clk,
      ap_rst_n => action_rst_n,
      --HBM_IPASSIGNMENT_INSERTION_POINT
      m_axi_host_mem_araddr(63 downto 0) => axi_host_mem_araddr(63 downto 0),
      m_axi_host_mem_arburst(1 downto 0) => axi_host_mem_arburst(1 downto 0),
      m_axi_host_mem_arcache(3 downto 0) => axi_host_mem_arcache(3 downto 0),
      m_axi_host_mem_arlen(7 downto 0) => axi_host_mem_arlen(7 downto 0),
      --m_axi_host_mem_arlock(0) => axi_host_mem_arlock(0),
      m_axi_host_mem_arprot(2 downto 0) => axi_host_mem_arprot(2 downto 0),
      --m_axi_host_mem_arqos(3 downto 0) => axi_host_mem_arqos(3 downto 0),
      m_axi_host_mem_arready => axi_host_mem_arready,
      m_axi_host_mem_arsize(2 downto 0) => axi_host_mem_arsize(2 downto 0),
      m_axi_host_mem_arvalid => axi_host_mem_arvalid,
      m_axi_host_mem_awaddr(63 downto 0) => axi_host_mem_awaddr(63 downto 0),
      m_axi_host_mem_awburst(1 downto 0) => axi_host_mem_awburst(1 downto 0),
      m_axi_host_mem_awcache(3 downto 0) => axi_host_mem_awcache(3 downto 0),
      m_axi_host_mem_awlen(7 downto 0) => axi_host_mem_awlen(7 downto 0),
      --m_axi_host_mem_awlock(0) => axi_host_mem_awlock(0),
      m_axi_host_mem_awprot(2 downto 0) => axi_host_mem_awprot(2 downto 0),
      --m_axi_host_mem_awqos(3 downto 0) => axi_host_mem_awqos(3 downto 0),
      m_axi_host_mem_awready => axi_host_mem_awready,
      m_axi_host_mem_awsize(2 downto 0) => axi_host_mem_awsize(2 downto 0),
      m_axi_host_mem_awvalid => axi_host_mem_awvalid,
      m_axi_host_mem_bready => axi_host_mem_bready,
      m_axi_host_mem_bresp(1 downto 0) => axi_host_mem_bresp(1 downto 0),
      m_axi_host_mem_bvalid => axi_host_mem_bvalid,
      m_axi_host_mem_rdata(1023 downto 0) => axi_host_mem_rdata(1023 downto 0),
      m_axi_host_mem_rlast => axi_host_mem_rlast,
      m_axi_host_mem_rready => axi_host_mem_rready,
      m_axi_host_mem_rresp(1 downto 0) => axi_host_mem_rresp(1 downto 0),
      m_axi_host_mem_rvalid => axi_host_mem_rvalid,
      m_axi_host_mem_wdata(1023 downto 0) => axi_host_mem_wdata(1023 downto 0),
      m_axi_host_mem_wlast => axi_host_mem_wlast,
      m_axi_host_mem_wready => axi_host_mem_wready,
      m_axi_host_mem_wstrb(127 downto 0) => axi_host_mem_wstrb(127 downto 0),
      m_axi_host_mem_wvalid => axi_host_mem_wvalid,
      s_axi_control_araddr(31downto 0) => axi_ctrl_reg_araddr(31 downto 0),
      --s_axi_control_arprot(2 downto 0) => axi_ctrl_reg_arprot(2 downto 0),
      s_axi_control_arprot(2 downto 0) => (others => '0'), --TODO check
      s_axi_control_arready => axi_ctrl_reg_arready,
      s_axi_control_arvalid => axi_ctrl_reg_arvalid,
      s_axi_control_awaddr(31 downto 0) => axi_ctrl_reg_awaddr(31 downto 0),
      --s_axi_control_awprot(2 downto 0) => axi_ctrl_reg_awprot(2 downto 0),
      s_axi_control_awprot(2 downto 0) => (others => '0'), --TODO check
      s_axi_control_awready => axi_ctrl_reg_awready,
      s_axi_control_awvalid => axi_ctrl_reg_awvalid,
      s_axi_control_bready => axi_ctrl_reg_bready,
      s_axi_control_bresp(1 downto 0) => axi_ctrl_reg_bresp(1 downto 0),
      s_axi_control_bvalid => axi_ctrl_reg_bvalid,
      s_axi_control_rdata(31 downto 0) => axi_ctrl_reg_rdata(31 downto 0),
      s_axi_control_rready => axi_ctrl_reg_rready,
      s_axi_control_rresp(1 downto 0) => axi_ctrl_reg_rresp(1 downto 0),
      s_axi_control_rvalid => axi_ctrl_reg_rvalid,
      s_axi_control_wdata(31 downto 0) => axi_ctrl_reg_wdata(31 downto 0),
      s_axi_control_wready => axi_ctrl_reg_wready,
      s_axi_control_wstrb(3 downto 0) => axi_ctrl_reg_wstrb(3 downto 0),
      s_axi_control_wvalid => axi_ctrl_reg_wvalid
    );

end action_example;
